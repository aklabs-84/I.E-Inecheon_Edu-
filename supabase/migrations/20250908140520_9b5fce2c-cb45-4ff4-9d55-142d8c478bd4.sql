-- Create likes table for post likes
CREATE TABLE public.likes (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL,
  post_id bigint NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  
  -- Ensure one like per user per post
  UNIQUE(user_id, post_id)
);

-- Enable RLS
ALTER TABLE public.likes ENABLE ROW LEVEL SECURITY;

-- Create policies for likes
CREATE POLICY "likes_insert_own" ON public.likes
  FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "likes_delete_own" ON public.likes
  FOR DELETE USING (user_id = auth.uid());

CREATE POLICY "likes_select_all" ON public.likes
  FOR SELECT USING (true);

-- Add foreign key constraint
ALTER TABLE public.likes 
ADD CONSTRAINT likes_post_id_fkey 
FOREIGN KEY (post_id) REFERENCES public.posts(id) ON DELETE CASCADE;

-- Create function to get post statistics
CREATE OR REPLACE FUNCTION get_post_stats(post_id_param bigint)
RETURNS TABLE(like_count bigint, comment_count bigint, user_liked boolean)
LANGUAGE sql
STABLE
AS $$
  SELECT 
    (SELECT COUNT(*) FROM public.likes WHERE post_id = post_id_param) as like_count,
    (SELECT COUNT(*) FROM public.comments WHERE post_id = post_id_param AND is_hidden = false) as comment_count,
    (SELECT EXISTS(SELECT 1 FROM public.likes WHERE post_id = post_id_param AND user_id = auth.uid())) as user_liked;
$$;